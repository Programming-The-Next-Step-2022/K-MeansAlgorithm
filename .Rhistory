## correlations
subsetMildAbsentInterpersonalViolenceCorrs
corrTabelsubsetMildAbsentInterpersonalViolence <- rcorr(as.matrix(subsetMildAbsentInterpersonalViolence), type = "pearson")
corrTabelsubsetMildAbsentInterpersonalViolence
Colors <- c("darkturquoise", "darkorchid2", "lightskyblue", "cadetblue4", "deeppink", "violetred3", "deepskyblue1")
Names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
Groups <- rep(c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share"))
#### Plot 4 Mild absent interpersonal violence
corGraph <- qgraph(subsetMildAbsentInterpersonalViolenceCorrs, layout = "circle", graph = "cor",
nodeNames = column_names, groups = Groups, legend.cex = 0.3,
cut = 0.3, maximum = 1, minimum = 0, esize = 10,
vsize = 10, repulsion = 0.8, color = Colors,
edge.color = "dodgerblue4")
title("mild, absent, interpersonal violence", line = 3.4)
#### 5  Subset Extreme Present Accident
subsetExtremePresentAccident<- DF2 %>% select(29:35)
View(subsetExtremePresentAccident)
#Rename columns
column_names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
colnames(subsetExtremePresentAccident) <- column_names
subsetExtremePresentAccidentCorrs <- cor_auto(subsetExtremePresentAccident)
round(subsetExtremePresentAccidentCorrs,3)
## correlations
subsetExtremePresentAccidentCorrs
corrTabelsubsetExtremePresentAccidentCorrs <- rcorr(as.matrix(subsetExtremePresentAccident), type = "pearson")
corrTabelsubsetExtremePresentAccidentCorrs
Colors <- c("darkturquoise", "darkorchid2", "lightskyblue", "cadetblue4", "deeppink", "violetred3", "deepskyblue1")
Names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
Groups <- rep(c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share"))
## Plot 5 Extreme Present Accident
corGraph <- qgraph(subsetExtremePresentAccidentCorrs,layout = "circle", graph = "cor",
nodeNames = column_names, groups = Groups, legend.cex = 0.3,
cut = 0.3, maximum = 1, minimum = 0, esize = 10,
vsize = 10, repulsion = 0.8, color = Colors,
edge.color = "dodgerblue4")
title("extreme, present, accident", line = 3.2)
#### 6  Subset Extreme Present interpersonal violence
subsetExtremePresentInterpersonalViolence<- DF2 %>% select(36:42)
View(subsetExtremePresentInterpersonalViolence)
#Rename columns
column_names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
colnames(subsetExtremePresentInterpersonalViolence) <- column_names
subsetExtremePresentInterpersonalViolenceCorrs <- cor_auto(subsetExtremePresentInterpersonalViolence)
round(subsetExtremePresentInterpersonalViolenceCorrs,3)
## correlations
subsetExtremePresentInterpersonalViolenceCorrs
corrTabelsubsetExtremePresentInterpersonalViolenceCorrs <- rcorr(as.matrix(subsetExtremePresentInterpersonalViolence), type = "pearson")
corrTabelsubsetExtremePresentInterpersonalViolenceCorrs
Colors <- c("darkturquoise", "darkorchid2", "lightskyblue", "cadetblue4", "deeppink", "violetred3", "deepskyblue1")
Names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
Groups <- rep(c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share"))
## Plot 6 Extreme Present Interpersonal Violence
corGraph <- qgraph(subsetExtremePresentInterpersonalViolenceCorrs, layout = "circle", graph = "cor",
nodeNames = column_names, groups = Groups, legend.cex = 0.3,
cut = 0.3, maximum = 1, minimum = 0, esize = 10,
vsize = 10, repulsion = 0.8, color = Colors,
edge.color = "dodgerblue4")
title("extreme, present, interpersonal violence", line = 3.4)
#### 7  Subset Extreme Absent accident
subsetExtremeAbsentAccident<- DF2 %>% select(43:49)
View(subsetExtremeAbsentAccident)
#Rename columns
column_names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
colnames(subsetExtremeAbsentAccident) <- column_names
subsetExtremeAbsentAccidentCorrs <- cor_auto(subsetExtremeAbsentAccident)
round(subsetExtremeAbsentAccidentCorrs,3)
## correlations
corrTabelsubsetExtremeAbsentAccidentCorrs <- rcorr(as.matrix(subsetExtremeAbsentAccident), type = "pearson")
corrTabelsubsetExtremeAbsentAccidentCorrs
Colors <- c("darkturquoise", "darkorchid2", "lightskyblue", "cadetblue4", "deeppink", "violetred3", "deepskyblue1")
Names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
Groups <- rep(c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share"))
## Plot 7 Extreme absent Accident
corGraph <- qgraph(subsetExtremeAbsentAccidentCorrs,layout = "circle", graph = "cor",
nodeNames = column_names, groups = Groups, legend.cex = 0.3,
cut = 0.3, maximum = 1, minimum = 0, esize = 10,
vsize = 10, repulsion = 0.8, color = Colors,
edge.color = "dodgerblue4")
title("extreme, absent, accident", line = 3.2)
#### 8  Subset Extreme Absent interpersonal violence
subsetExtremeAbsentInterpersonalViolence<- DF2 %>% select(50:56)
View(subsetExtremeAbsentInterpersonalViolence)
#Rename columns
column_names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
colnames(subsetExtremeAbsentInterpersonalViolence) <- column_names
subsetExtremeAbsentInterpersonalViolenceCorrs <- cor_auto(subsetExtremeAbsentInterpersonalViolence)
round(subsetExtremeAbsentInterpersonalViolenceCorrs,3)
## correlations
corrTabelsubsetExtremeAbsentInterpersonalViolenceCorrs <- rcorr(as.matrix(subsetExtremeAbsentInterpersonalViolence), type = "pearson")
corrTabelsubsetExtremeAbsentInterpersonalViolenceCorrs
Colors <- c("darkturquoise", "darkorchid2", "lightskyblue", "cadetblue4", "deeppink", "violetred3", "deepskyblue1")
Names <- c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share")
Groups <- rep(c("Curiosity", "Distress", "Watch", "CallHelp", "Help", "Film", "Share"))
## Plot 8 Extreme absent Interpersonal Violence
corGraph <- qgraph(subsetExtremeAbsentInterpersonalViolenceCorrs,layout = "circle", graph = "cor",
nodeNames = column_names, groups = Groups, legend.cex = 0.3,
cut = 0.3, maximum = 1, minimum = 0, esize = 10,
vsize = 10, repulsion = 0.8, color = Colors,
edge.color = "dodgerblue4")
title("extreme, absent, interpersonal violence", line = 3.4)
#Compute CS-Coefficient (best if above 0.5): ----
#NetworkMPA
CS_networkMPA <- corStability(casedrop_bootstrap_networkMPA)
#NetworkMPIV
CS_networkMPIV <- corStability(casedrop_bootstrap_networkMPIV)
setwd("~/GitHub/K-MeansAlgorithm")
library(ggplot2)
library(ggrepel)
#install.packages("philentropy")
library(philentropy)
library(readxl)
importData <- function(filename) {
Data <- read_excel(filename)
}
myPoints <- importData("myDataSet.xlsx")
myPoints
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints) +
labs(
title = "Scatterplot of points",
x = "",
y ="") +
theme_classic()
# step 2: Select the number K to decide the number of clusters
kCluster = 3
x <- c(3.5, 9.5)
y <- c(7.5, 3.5)
# make dataframe
# make dataframe
centroids <- data.frame(x, y)
centroids
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints)+
geom_point(aes(x,y), col = "red", data = centroids, size = 5, shape = 15) +
labs(
title = "Scatterplot of points and centroids",
x = "",
y ="")+
theme_classic()
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
eucledianDistance = sqrt(distance_kCluster1$Vector1-distance_kCluster1$Vector2)^2
return(eucledianDistance)
}
euclideanDistanceKClusters(myPoints, centroids[1,])
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance
?importData
?importData
myPoints[,]
?importData
debugonce(compute_importData)
importData <- function(filename) {
Data <- read_excel(filename)
}
debugonce(importData)
iD <- importData
iD <- importData()
debugonce(euclideanDistanceKClusters)
#'@export
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
eucledianDistance = sqrt(distance_kCluster1$Vector1-distance_kCluster1$Vector2)^2
return(eucledianDistance)
}
debugonce(euclideanDistanceKClusters)
eD <- euclideanDistanceKClusters
eD <- euclideanDistanceKClusters()
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
disttt <- myPoints[,1:ncol(myPoints)] - centroids[1:ncol(centroids)]
disttt <- myPoints[,1:ncol(myPoints)] - centroids[1:ncol(centroids)]
disttt <- myPoints[,1:ncol(myPoints)] - centroids[1:ncol(centroids)]
library(ggplot2)
library(ggrepel)
#install.packages("philentropy")
library(philentropy)
library(readxl)
## step 1 create dataset
# read the dataset from excel
# Function that imports the data
importData <- function(filename) {
Data <- read_excel(filename)
}
myPoints <- importData("myDataSet.xlsx")
myPoints
# plot dataset
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints) +
labs(
title = "Scatterplot of points",
x = "",
y ="") +
theme_classic()
# step 2: Select the number K to decide the number of clusters
kCluster = 3
x <- c(3.5, 9.5)
y <- c(7.5, 3.5)
# make dataframe
centroids <- data.frame(x, y)
centroids
# plot points and centroids
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints)+
geom_point(aes(x,y), col = "red", data = centroids, size = 5, shape = 15) +
labs(
title = "Scatterplot of points and centroids",
x = "",
y ="")+
theme_classic()
disttt <- myPoints[,1:ncol(myPoints)] - centroids[1:ncol(centroids)]
disttt <- cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distt
disttt
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
eucledianDistance = sqrt((distance)^2)
return(eucledianDistance)
euclideanDistanceKClusters(myPoints, centroids[1,])
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
eucledianDistance = sqrt((distance)^2)
return(eucledianDistance)
}
euclideanDistanceKClusters(myPoints[,1] - centroids[1,1])
1 <- euclideanDistanceKClusters(myPoints[,1] - centroids[1,1])
blablabla <- euclideanDistanceKClusters(myPoints[,1] - centroids[1,1])
blablabla
blablabla
blablabla <- euclideanDistanceKClusters(myPoints[,1] - centroids[1,1])
blablabla
library(ggplot2)
library(ggrepel)
#install.packages("philentropy")
library(philentropy)
library(readxl)
## step 1 create dataset
# read the dataset from excel
# Function that imports the data
importData <- function(filename) {
Data <- read_excel(filename)
}
myPoints <- importData("myDataSet.xlsx")
myPoints
# plot dataset
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints) +
labs(
title = "Scatterplot of points",
x = "",
y ="") +
theme_classic()
# step 2: Select the number K to decide the number of clusters
kCluster = 3
x <- c(3.5, 9.5)
y <- c(7.5, 3.5)
# make dataframe
centroids <- data.frame(x, y)
centroids
# plot points and centroids
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints)+
geom_point(aes(x,y), col = "red", data = centroids, size = 5, shape = 15) +
labs(
title = "Scatterplot of points and centroids",
x = "",
y ="")+
theme_classic()
distance_kCluster1 = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance_kCluster1
library(ggplot2)
library(ggrepel)
#install.packages("philentropy")
library(philentropy)
library(readxl)
## step 1 create dataset
# read the dataset from excel
# Function that imports the data
importData <- function(filename) {
Data <- read_excel(filename)
}
myPoints <- importData("myDataSet.xlsx")
myPoints
# plot dataset
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints) +
labs(
title = "Scatterplot of points",
x = "",
y ="") +
theme_classic()
# step 2: Select the number K to decide the number of clusters
kCluster = 3
# Step 3 select random initial centroids
## Make a function of the centroid
# create random centroids
x <- c(3.5, 9.5)
y <- c(7.5, 3.5)
# make dataframe
centroids <- data.frame(x, y)
centroids
setwd("~/GitHub/K-MeansAlgorithm")
library(ggplot2)
library(ggrepel)
#install.packages("philentropy")
library(philentropy)
library(readxl)
importData <- function(filename) {
Data <- read_excel(filename)
}
myPoints <- importData("myDataSet.xlsx")
myPoints
# plot dataset
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints) +
labs(
title = "Scatterplot of points",
x = "",
y ="") +
theme_classic()
# step 2: Select the number K to decide the number of clusters
kCluster = 3
# create random centroids
x <- c(3.5, 9.5)
y <- c(7.5, 3.5)
# make dataframe
centroids <- data.frame(x, y)
centroids
# plot points and centroids
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints)+
geom_point(aes(x,y), col = "red", data = centroids, size = 5, shape = 15) +
labs(
title = "Scatterplot of points and centroids",
x = "",
y ="")+
theme_classic()
distance_kCluster1 = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance_kCluster1
distance_kCluster1 = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
eucledianDistance = sqrt(distance$Vector1-distance$Vector2)^2
return(eucledianDistance)
}
euclideanDistanceKClusters(myPoints, centroids[1,])
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance
distance = (distance)^2
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance = (distance)^2
eucledianDistance = sqrt(distance$Vector1-distance$Vector2)
return(eucledianDistance)
}
euclideanDistanceKClusters(myPoints, centroids[1,])
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance
distance = (distance)^2
distance
eucledianDistance = sqrt(distance$Vector1 - distance$Vector2)
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance = (distance)^2
eucledianDistance = sqrt(distance)
return(eucledianDistance)
eucledianDistance = sqrt(distance$Vector1 - distance$Vector2)
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance = (distance)^2
eucledianDistance = sqrt(distance)
return(eucledianDistance)
}
euclideanDistanceKClusters(myPoints, centroids[1,1])
blabla <- euclideanDistanceKClusters(myPoints, centroids[1,1])
library(ggplot2)
library(ggrepel)
#install.packages("philentropy")
library(philentropy)
library(readxl)
importData <- function(filename) {
Data <- read_excel(filename)
}
myPoints <- importData("myDataSet.xlsx")
myPoints
myPoints
library(ggplot2)
library(ggrepel)
#install.packages("philentropy")
library(philentropy)
library(readxl)
importData <- function(filename) {
Data <- read_excel(filename)
}
myPoints <- importData("myDataSet.xlsx")
myPoints
# plot dataset
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints) +
labs(
title = "Scatterplot of points",
x = "",
y ="") +
theme_classic()
# step 2: Select the number K to decide the number of clusters
kCluster = 3
x <- c(3.5, 9.5)
y <- c(7.5, 3.5)
# make dataframe
centroids <- data.frame(x, y)
centroids
# plot points and centroids
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints)+
geom_point(aes(x,y), col = "red", data = centroids, size = 5, shape = 15) +
labs(
title = "Scatterplot of points and centroids",
x = "",
y ="")+
theme_classic()
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
eucledianDistance = sqrt(distance_kCluster1$Vector1-distance_kCluster1$Vector2)^2
return(eucledianDistance)
}
euclideanDistanceKClusters(myPoints, centroids[1,])
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance = distance^2
eucledianDistance = sqrt(distance)
return(eucledianDistance)
}
euclideanDistanceKClusters(myPoints, centroids[1,])
euclideanDistanceKClusters(myPoints, centroids[2,])
myPoints
euclideanDistanceKClusters(myPoints, centroids[2,])
for (i in 1: kCluster) {
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance = distance^2
eucledianDistance = sqrt(distance)
return(eucledianDistance)
}
}
# step 2: Select the number K to decide the number of clusters
kCluster = 3
library(ggplot2)
library(ggrepel)
#install.packages("philentropy")
library(philentropy)
library(readxl)
## step 1 create dataset
# read the dataset from excel
# Function that imports the data
importData <- function(filename) {
Data <- read_excel(filename)
}
myPoints <- importData("myDataSet.xlsx")
myPoints
# plot dataset
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints) +
labs(
title = "Scatterplot of points",
x = "",
y ="") +
theme_classic()
# step 2: Select the number K to decide the number of clusters
kCluster = 3
# Step 3 select random initial centroids
## Make a function of the centroid
# create random centroids
x <- c(3.5, 9.5)
y <- c(7.5, 3.5)
# make dataframe
centroids <- data.frame(x, y)
centroids
# plot points and centroids
ggplot()+
geom_point(aes(Vector1,Vector2), col = "blue", data = myPoints)+
geom_point(aes(x,y), col = "red", data = centroids, size = 5, shape = 15) +
labs(
title = "Scatterplot of points and centroids",
x = "",
y ="")+
theme_classic()
# Step 4 Find the euclidean disance between the points and the centroids
# Loopje maken met k clusters
for (i in 1: kCluster) {
euclideanDistanceKClusters <- function(myPoints, centroids){
distance = cbind((myPoints[,1] - centroids[1,1]), (myPoints[,2] - centroids[1,2]))
distance = distance^2
eucledianDistance = sqrt(distance)
return(eucledianDistance)
}
}
euclideanDistanceKClusters(myPoints, centroids[1,])
euclideanDistanceKClusters(myPoints, centroids[2,])
for (i in 1: kCluster)
{
for (j in 1: nrow(myPoints))
{
euclideanDistanceKClusters <- function(myPoints, centroids){
distance[i,j] = cbind((myPoints[i,,1] - centroids[j,1,1]), (myPoints[i,,2] - centroids[j,1,2]))
distance = distance^2
eucledianDistance = sqrt(distance)
return(eucledianDistance)
}
}
}
